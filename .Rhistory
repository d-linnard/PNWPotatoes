library(ggplot2)
library(gridExtra)
library(ggExtra)
library(naniar) # To visualize missing data
library(Hmisc) # To tabulate a summary of the data
library(maps) # for maps
library(knitr) # format tables
library(ggplot2) # For diagnostics
# Packages for data wrangling
library(dplyr)
library(tidyr)
library(reshape2)
# Packages for inference /presentation of inference*
library(stargazer)
library(plm) # For estimating fixed and random effect model
library(lmtest)
library(sandwich) # for robust standard errors
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#Checking structure
str(df)
#Summary of dataframe
summary("df")
is.na(x)
nassqs_params()
is.na(df)
# Automate county level average for each county
MuAcreageDf <- dta %>%
group_by(county_name) %>%
summarise('MuAcres' = mean(dta$value, na.rm = TRUE)) %>%
dplyr::select(MuAcres, county_name)
nassqs_params()
# Automate county level average for each county
MuAcreageDf <- dta %>%
group_by(county_name) %>%
summarise('MuAcres' = mean(value, na.rm = TRUE)) %>%
dplyr::select(MuAcres, county_name)
nassqs_params()
#Subset county data
WACountyData <- aggregate(dta[, 40],
list(dta$county_name),
FUN = mean,
na.rm = TRUE)
MuAcreageDf
AdamsAverageAcreage
WACountyMeans <- data.frame(AdamsAverageAcreage, AsotinAverageAcreage, BentonAverageAcreage, ChelanAverageAcreage, ClallamAverageAcreage, ClarkAverageAcreage, ColumbiaAverageAcreage, CowlitzAverageAcreage, DouglasAverageAcreage, FerryAverageAcreage, FranklinAverageAcreage, GrantAverageAcreage, GraysHarborAverageAcreage, IslandAverageAcreage, JeffersonAverageAcreage, KingAverageAcreage, KitsapAverageAcreage, KittitasAverageAcreage, KlickitatAverageAcreage, LewisAverageAcreage, LincolnAverageAcreage, MasonAverageAcreage, OkanoganAverageAcreage, PacificAverageAcreage, PendOreilleAverageAcreage, PierceAverageAcreage, SanJuanAverageAcreage, SkagitAverageAcreage, SkamaniaAverageAcreage, SnohomishAverageAcreage, SpokaneAverageAcreage, StevensAverageAcreage, ThurstonAverageAcreage, WahkiakumAverageAcreage, WallaWallaAverageAcreage, WhatcomAverageAcreage, WhitmanAverageAcreage, YakimaAverageAcreage, OtherUnlistedAverageAcreage)
library(rnassqs)
library(pkgmaker)
library(dplyr)
library(ggplot2)
library(data.table)
nassqs_auth(key = 'E41D0CC0-8353-3153-A16A-850F2F13AC0E')
nassqs_params()
params <- list(commodity_desc = "potatoes", year = 1950, state_alpha = "WA")
nassqs(params)
nassqs_acres(params)
param_list <- list(commodity_desc = "potatoes", state_alpha = "WA")
data_list <- lapply(1882:2019, function(yr) {
params <- param_list
params[['year']] <- yr
nassqs_acres(params)
})
dta <- rbindlist(data_list, use.names = TRUE)
dim(dta)
table(dta$year)
str(dta)
dta$value = as.numeric(gsub(",", "", dta$Value))
dta$value
summary(as.numeric(dta$value))
lapply(dta, unique)
options(repr.plot.width = 20, repr.plot.height = 10)
dta %>%
group_by(year) %>%
select(year, value, county_name) %>%
ggplot(aes(x=year, y=value)) +
geom_jitter(aes(colour = county_name), size=5, alpha=3/5) +
theme_classic() +
theme(axis.title.x=element_text(size=16, face="bold"),
axis.text.x=element_text(size=14),
axis.title.y=element_text(size=16,face="bold"),
axis.text.y=element_text(size=14)) +
scale_color_hue(l=70, c=40) +
labs(x="Time (1882-2019)",
y="Acres") +
geom_smooth(method = "loess", span = 0.1, se = FALSE, color="grey40")
nassqs_params()
dta$value = as.numeric(gsub(",", "", dta$Value))
dta$value
summary(as.numeric(dta$value))
lapply(dta, unique)
nassqs_params()
dta$value = as.numeric(gsub(",", "", dta$Value))
dta$value
summary(as.numeric(dta$value))
lapply(dta, unique)
nassqs_params()
dta$value = as.numeric(gsub(",", "", dta$Value))
dta$value
summary(as.numeric(dta$value))
lapply(dta, unique)
### Coerce value into a number
```{r setup, include=FALSE, warning=F}
dta$value = as.numeric(gsub(",", "", dta$Value))
dta$value
summary(as.numeric(dta$value))
lapply(dta, unique)
?aggregate()
?aggregate
nassqs_params()
# Automate county level average for each county
MuAcreageDf <- dta %>%
group_by(county_name) %>%
summarise('MuAcres' = mean(value, na.rm = TRUE)) %>%
dplyr::select(MuAcres, county_name)
#Subset county data
WACountyData <- aggregate(dta[, "value"],
by = list(dta$county_name),
FUN = mean,
na.rm = TRUE)
WACountyData
nassqs_params()
#Subset county data
WACountyData <- aggregate(dta[, 40],
by = list(dta$county_name),
FUN = mean,
na.rm = TRUE)
WACountyData
nassqs_params()
#Subset county data
WACountyData <- aggregate(dta[, "value"],
by = list("county_name"),
FUN = mean,
na.rm = TRUE,
data = dta)
nassqs_params()
#Subset county data
WACountyData <- aggregate(dta[, "value"],
by = list(county_name),
FUN = mean,
na.rm = TRUE,
data = dta)
nassqs_params()
#Subset county data
WACountyData <- aggregate(dta[, "value"],
by = list(dta$county_name),
FUN = mean,
na.rm = TRUE,
data = dta)
nassqs_params()
library(naniar)
nassqs_params()
vis_miss(dta$country_name)
nassqs_params()
vis_miss(dta)
nassqs_params()
vis_miss(dta,dta$country_name)
library(rnassqs)
library(pkgmaker)
library(dplyr)
library(ggplot2)
library(data.table)
nassqs_auth(key = 'E41D0CC0-8353-3153-A16A-850F2F13AC0E')
nassqs_params()
params <- list(commodity_desc = "potatoes", year = 1950, state_alpha = "WA")
nassqs(params)
nassqs_acres(params)
param_list <- list(commodity_desc = "potatoes", state_alpha = "WA")
data_list <- lapply(1882:2019, function(yr) {
params <- param_list
params[['year']] <- yr
nassqs_acres(params)
})
dta <- rbindlist(data_list, use.names = TRUE)
dim(dta)
table(dta$year)
str(dta)
dta$value = as.numeric(gsub(",", "", dta$Value))
dta$value
summary(as.numeric(dta$value))
lapply(dta, unique)
options(repr.plot.width = 20, repr.plot.height = 10)
dta %>%
group_by(year) %>%
select(year, value, county_name) %>%
ggplot(aes(x=year, y=value)) +
geom_jitter(aes(colour = county_name), size=5, alpha=3/5) +
theme_classic() +
theme(axis.title.x=element_text(size=16, face="bold"),
axis.text.x=element_text(size=14),
axis.title.y=element_text(size=16,face="bold"),
axis.text.y=element_text(size=14)) +
scale_color_hue(l=70, c=40) +
labs(x="Time (1882-2019)",
y="Acres") +
geom_smooth(method = "loess", span = 0.1, se = FALSE, color="grey40")
library("rnaturalearth")
library("rnaturalearthdata")
library("ggplot2")
library("rworldmap")
library(dplyr)
library(geosphere)
library(gpclib)
library(tidyverse)
library(mapdata)
library(raster)
library(geojsonio)
library(usmap)
worldMap <- getMap()
world.points <- fortify(worldMap)
world.points$region <- world.points$id
states <- map_data("state")
states = states %>%
filter(region %in% c("montana", "california","washington","pennsylvania"))#
world.df <- world.points[,c("long","lat","group", "region")]
p = worldmap <- ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group),
color="grey", fill="grey") +
geom_polygon(data = states, aes(x = long, y = lat, group = group),
color="black", fill="grey", lwd=0.35) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45) +
coord_map("ortho", orientation=c(40, -90, 0))
p
##setwd('/Users/Hannah 23/Documents')
# Saving the map as a tiff file
tiff('PA.tiff', units="in",
width=5, height=5,
res=600, compression = 'lzw')
p
dev.off()
us <- getData("GADM",country="USA",level=1)
canada <- getData("GADM",country="CAN",level=1)
states <- c('Idaho', 'Oregon', 'Washington', 'Montana', 'California', 'Nevada', 'Utah', 'Wyoming')
provinces <- c("British Columbia", "Alberta")
us.states <- us[us$NAME_1 %in% states,]
ca.provinces  <- canada[canada$NAME_1 %in% provinces,]
p <- ggplot(us.states,
aes(x=long, y=lat, group=group))+
geom_path(size=0.25)+
geom_path(data=ca.provinces, size=0.25,color="grey60")+
geom_path(data=subset(us.states, NAME_1 %in% c('Montana', 'California','Nevada','Utah','Wyoming')),
size=0.25,color="grey60")+
geom_polygon(data=subset(us.states, NAME_1 %in% c('Idaho', 'Oregon', 'Washington')),
aes(x=long, y=lat, group=group), fill="white", colour = "black", size=0.50)+
theme(panel.background = element_rect(fill = "white", colour = "grey50"))+
coord_map("bonne", lat0 = 50,
xlim = c(-127, -112),ylim = c(41, 50))+
xlab("Longitude") +
ylab("Latitude")
####setwd('/Users/Hannah 23/Documents')
#### Changing plot size and saving as a tiff file
tiff('PNW-s.tiff', units="in",
width=10, height=10,
res=300, compression = 'lzw')
options(repr.plot.width=20, repr.plot.height=20)
p
dev.off()
# Packages for graphics
library(ggplot2)
library(gridExtra)
library(ggExtra)
library(naniar) # To visualize missing data
library(Hmisc) # To tabulate a summary of the data
library(maps) # for maps
library(knitr) # format tables
library(ggplot2) # For diagnostics
# Packages for data wrangling
library(dplyr)
library(tidyr)
library(reshape2)
# Packages for inference /presentation of inference*
library(stargazer)
library(plm) # For estimating fixed and random effect model
library(lmtest)
library(sandwich) # for robust standard errors
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#Checking structure
str(df)
#Summary of dataframe
summary("df")
is.na(df)
MainStates <- map_data("state")
### Add new columns for potato acerage over time, subset of dta dataframe. Select columns for value (acreage), state_name (Washington), year and county_name. (Check back:Mutate to create new column called region.There are 2913 rows of data.)
Statesdf <- dta[ , c("value", "state_name", "year", "county_name")]%>%
mutate("region" = rep(unique(MainStates$region)[2913],
each=1))
### Plot acreage(value) by year, need add color. Log(value)?
ggplot(Statesdf, aes(x=year, y=value)) +
geom_line() + geom_point(size=0.05, alpha=0.5) +
facet_wrap(~region) +
theme_classic() +
theme(legend.position="none",
axis.text.y=element_text(size=4),
axis.text.x=element_text(size=4, angle = 90))
State.Mu.TF <- Statesdf %>%
group_by(region) %>%
summarise(TF.mu=mean(value))
### Rename region column
names(State.Mu.TF)[1] <- "region"
### Join acreage data with map data
JoinedStates <- inner_join(MainStates,
State.Mu.TF,
by = "region")
### Plots
A <- ggplot() +
geom_polygon(data=JoinedStates ,
aes(x=long, y=lat, group=group,
fill=TF.mu),
color="black", lwd=0.3) +
scale_fill_gradient(low="blue", high="red") +
theme_classic() + coord_map("conic", lat0 = 30) +
labs(title="A",fill=expression("Potato acreage in Washington state over time"),size=2) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="right",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())+
theme(legend.title=element_text(size=5))
B <- ggplot(Statesdf, aes(x=factor(year), y=value),
group=year) +
geom_boxplot(color="grey60", outlier.colour = "grey60") +
geom_jitter(alpha=0.4,color="grey60",
position=position_jitter(width=0.1)) +
geom_smooth(method = "loess", se=F,
aes(group=1), span=0.1, color="orangered", alpha=0.7) +
labs(title="B", y=expression("Potato acreage in Washington state over time"), x="Time (1882-2019)") +
theme_classic() +
theme(legend.position="none",
axis.title.y=element_text(size=8),
axis.text.x = element_text(angle = 90))
B<-ggMarginal(B, type="histogram",
margins = "y",
col="gray",
fill = "grey83")
grid.arrange(A,B)
# Automate county level average for each county
MuAcreageDf <- dta %>%
group_by(county_name) %>%
summarise('MuAcres' = mean(value, na.rm = TRUE)) %>%
dplyr::select(MuAcres, county_name)
#Subset county data
WACountyData <- aggregate(dta[, "value"],
by = list(dta$county_name),
FUN = mean,
na.rm = TRUE,
data = dta)
#Need to manually add in Garfield county with 0 acreage (not included on original dataframe, did not have any potato acreage listed)
WACountyData[nrow(WACountyData) + 1,] = c("garfield","0")
#Delete first row in WaCountyData that is blank in the county row and the average of all the counties in the other row and remove Other(combined)counties row
WACountyData <- WACountyData[-c(1,25),]
#Rename county column in WACountyData to "subregion" to match the map county column name and change the WACountyData counties to all lowercase to match the map dataframe so they can be joined
colnames(WACountyData)[1] <- "subregion"
WACountyData = as.data.frame(sapply(WACountyData, tolower))
# Coerce Value to numeric
as.numeric(as.character(dta$Value))
class(dta)
dta[county_name == "COLUMBIA",] # what does (D) mean?- Not enough farms to enable anonymity (pg.X in doc Y)
states <- map_data("state")
dim(states)
ut_df <- subset(states, region == "washington")
head(ut_df)
counties <- map_data("county")
ut_county <- subset(counties, region == "washington")
head(ut_county)
ut_base <- ggplot(data = ut_df, mapping = aes(x = long, y = lat, group =
group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
ut_base + theme_classic() +
geom_polygon(data = ut_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)  # get the state border back on top
#Joined county data, ut_county dataframe is map data for the counties in Washington state, WACountyData includes the average potato acreage for each county over time
JoinedCounties <- inner_join(ut_county, WACountyData, by = "subregion")
df %>%
dplyr::select('AverageAcerage' = mean(acerage)) # package::function()
nassqs_params()
df %>%
dplyr::select('AverageAcerage' = mean(acerage)) # package::function()
nassqs_params()
df %>%
select('AverageAcerage' = mean(acerage)) # package::function()
nassqs_params()
df %>%
dplyr::select( mean(acerage)) # package::function()
nassqs_params()
df %>%
dplyr::select(mean(acerage)) # package::function()
nassqs_params()
df %>%
dplyr::select(acerage) # package::function()
nassqs_params()
df %>%
dplyr::select(dta$acerage) # package::function()
nassqs_params()
df %>%
dplyr::summarise('AverageAcerage' = mean(acerage)) %>%
select(AverageAcerage)# package::function()
nassqs_params()
df %>%
dplyr::summarise('AverageAcerage' = mean(acerage)) %>%
select('AverageAcerage')# package::function()
nassqs_params()
df %>%
dplyr::summarise('AverageAcerage' = mean(acerage)) # package::function()
nassqs_params()
df %>%
dplyr::summarize('AverageAcerage' = mean(acerage)) # package::function()
nassqs_params()
df %>%
dplyr::select('AverageAcerage' = mean(acerage)) # package::function()
names(WACountyData)
nassqs_params()
ut_base <- ggplot(data = ut_df,
mapping = aes(x = long,
y = lat,
group =
group,
color = subregion)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
# Import
load("driving.RData")
# Rename
df <- data
# Structure
str(df)
# Summary
summary(df)
# Summary
describe(df)
# Open map data
MainStates <- map_data("state")
# Add new columns for traffic fatalities over time
Statesdf <- df %>%
dplyr::select(totfatrte, state, year, statepop) %>%
mutate("region" = rep(unique(MainStates$region)[-8],
each=25))
# By year
ggplot(Statesdf, aes(x=year, y=log(totfatrte),
colour = region)) +
geom_line() + geom_point(size=0.05, alpha=0.5) +
facet_wrap(~region) +
theme_classic() +
theme(legend.position="none",
axis.text.y=element_text(size=4),
axis.text.x=element_text(size=4, angle = 90))
State.Mu.TF <- Statesdf %>%
group_by(region) %>%
summarise(TF.mu=mean(log(totfatrte)))
# Rename column
names(State.Mu.TF)[1] <- "region"
# Merge fatality data with the MainStates data
JoinedStates <- inner_join(MainStates,# df1
State.Mu.TF,# df2
by = "region") # join by column "region"
# plot
A <- ggplot() +
geom_polygon(data=JoinedStates ,
aes(x=long, y=lat, group=group,
fill=TF.mu),
color="black", lwd=0.3) +
scale_fill_gradient(low="blue", high="red") +
theme_classic() + coord_map("conic", lat0 = 30) +
labs(title="A",fill=expression("log("~paste(frac("Total fatalities", "100,000 population"))~")"),size=2) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="right",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())+
theme(legend.title=element_text(size=5))
#grid.arrange(A,B)
B <- ggplot(Statesdf, aes(x=factor(year), y=log(totfatrte)),
group=year) +
geom_boxplot(color="grey60", outlier.colour = "grey60") +
geom_jitter(alpha=0.4,color="grey60",
position=position_jitter(width=0.1)) +
geom_smooth(method = "loess", se=F,
aes(group=1), span=0.1, color="orangered", alpha=0.7) +
labs(title="B", y=expression("log("~paste(frac("Total fatalities", "100,000 population"))~")"), x="Time (1980-2004)") +
theme_classic() +
theme(legend.position="none",
axis.title.y=element_text(size=8),
axis.text.x = element_text(angle = 90))
B<-ggMarginal(B, type="histogram",
margins = "y",
col="gray",
fill = "grey83")
grid.arrange(A,B)
nassqs_params()
ut_base <- ggplot(data = ut_df,
mapping = aes(x = long,
y = lat,
group =
group,
fill = subregion)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")

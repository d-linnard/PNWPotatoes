library(rnassqs)
install.packages("rnassqs")
library(rnassqs)
library(pkgmaker)
install.packages("pkgmaker")
library(dplyr)
library(ggplot2)
library(data.table)
nassqs_auth(key = '603EE21B-9682-3233-8C15-260C6E388A51')
# I have yet to determine how to go about hiding the API key in the script itself.
nassqs_params()
# Parameters to query on the data call
params <- list(commodity_desc = "potatoes", # We are looking at data on potatoes
state_alpha = "wa") # We are looking for data from only Washington State
nassqs_yields(params)
yield_df <- nassqs_yields(params) #define the data frame to a variable
str(yield_df) #find desired parameters within data frame
table(yield_df$year) #This shows that there is at least 1 entry for each year the data is available, 1882-2019.
yield <- yield_df %>% select(Value,
commodity_desc,
county_name,
year,
state_alpha,
unit_desc,
statisticcat_desc)
plot(table(yield_df$year)) #This shows that there is at least 1 entry for each year the data is available, 1882-2019.
yield <- yield_df %>% select(Value,
commodity_desc,
county_name,
year,
state_alpha,
unit_desc,
statisticcat_desc)
nassqs_yields(params)
nassqs_yields(params)
?nassqs_yields()
str(yield_df) #find desired parameters within data frame
class(yield$Value)
class(yield$Value)
head(yield$Value) #Head will show only the first 5 entries.
yield
yield$Value[0]
yield$Value[1]
yield$Value[1] yield$Value[2]
yield$Value[1] + yield$Value[2]
class(yield$Value)
head(yield$Value) #Head will show only the first 5 entries.
yield$value = as.integer(yield$Value)
head(yield$value)
yield$value = as.integer(yield$Value)
# Sanity check
head(yield$value)
YieldInteger$value = as.integer(yield$Value)
yield$ValueInteger = as.integer(yield$Value)
# Sanity check
head(yield$value)
# Sanity check
head(yield)
plot(yield$value, yield$ValueInteger)
summary(yield$value)
options(repr.plot.width = 20, repr.plot.height = 10) # Plot size
yield %>%
group_by(year) %>%
select(year, value, county_name) %>%
ggplot(aes(x=year, y=value)) +
geom_jitter(aes(colour = county_name), size=5, alpha=3/5) +
theme_classic() +
theme(axis.title.x=element_text(size=16, face="bold"),
axis.text.x=element_text(size=14),
axis.title.y=element_text(size=16,face="bold"),
axis.text.y=element_text(size=14)) +
scale_color_hue(l=70, c=40) +
labs(x="Time (1882-2019)",
y="Yield (CWT/acre)")  +
geom_smooth(method = "loess", span = 0.1, se = FALSE, color="grey40")
library("rnaturalearth")
install.packages("rnaturalearth")
library("rnaturalearthdata")
library("rnaturalearthdata)
library("rnaturalearthdata")
# Packages for graphics
library(ggplot2)
library(gridExtra)
library(ggExtra)
library(naniar) # To visualize missing data
library(Hmisc) # To tabulate a summary of the data
library(maps) # for maps
library(knitr) # format tables
library(ggplot2) # For diagnostics
# Packages for data wrangling
library(dplyr)
library(tidyr)
library(reshape2)
# Packages for inference /presentation of inference*
library(stargazer)
library(plm) # For estimating fixed and random effect model
library(lmtest)
library(sandwich) # for robust standard errors
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Packages for graphics
library(ggplot2)
library(gridExtra)
library(ggExtra)
library(naniar) # To visualize missing data
library(Hmisc) # To tabulate a summary of the data
library(maps) # for maps
library(knitr) # format tables
library(ggplot2) # For diagnostics
# Packages for data wrangling
library(dplyr)
library(tidyr)
library(reshape2)
# Packages for inference /presentation of inference*
library(stargazer)
library(plm) # For estimating fixed and random effect model
library(lmtest)
library(sandwich) # for robust standard errors
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Import
load("driving.RData")
# Rename
df <- data
# Structure
str(df)
# Summary
summary(df)
# Summary
describe(df)
# Are there any missing values/NAs?
df[!complete.cases(df),]
# Open map data
MainStates <- map_data("state")
# Add new columns for traffic fatalities over time
Statesdf <- df %>%
dplyr::select(totfatrte, state, year, statepop) %>%
mutate("region" = rep(unique(MainStates$region)[-8],
each=25))
# By year
ggplot(Statesdf, aes(x=year, y=log(totfatrte),
colour = region)) +
geom_line() + geom_point(size=0.05, alpha=0.5) +
facet_wrap(~region) +
theme_classic() +
theme(legend.position="none",
axis.text.y=element_text(size=4),
axis.text.x=element_text(size=4, angle = 90))
State.Mu.TF <- Statesdf %>%
group_by(region) %>%
summarise(TF.mu=mean(log(totfatrte)))
# Rename column
names(State.Mu.TF)[1] <- "region"
# Merge fatality data with the MainStates data
JoinedStates <- inner_join(MainStates,
State.Mu.TF, by = "region")
# plot
A <- ggplot() +
geom_polygon(data=JoinedStates ,
aes(x=long, y=lat, group=group,
fill=TF.mu),
color="black", lwd=0.3) +
scale_fill_gradient(low="blue", high="red") +
theme_classic() + coord_map("conic", lat0 = 30) +
labs(title="A",fill=expression("log("~paste(frac("Total fatalities", "100,000 population"))~")"),size=2) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="right",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())+
theme(legend.title=element_text(size=5))
#grid.arrange(A,B)
B <- ggplot(Statesdf, aes(x=factor(year), y=log(totfatrte)),
group=year) +
geom_boxplot(color="grey60", outlier.colour = "grey60") +
geom_jitter(alpha=0.4,color="grey60",
position=position_jitter(width=0.1)) +
geom_smooth(method = "loess", se=F,
aes(group=1), span=0.1, color="orangered", alpha=0.7) +
labs(title="B", y=expression("log("~paste(frac("Total fatalities", "100,000 population"))~")"), x="Time (1980-2004)") +
theme_classic() +
theme(legend.position="none",
axis.title.y=element_text(size=8),
axis.text.x = element_text(angle = 90))
B<-ggMarginal(B, type="histogram",
margins = "y",
col="gray",
fill = "grey83")
grid.arrange(A,B)
